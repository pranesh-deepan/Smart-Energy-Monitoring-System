import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
import time
import os

# --- CONFIGURATION ---
BLYNK_TOKEN = "Nl8OuGV4KS6bY3PfJM3fUURBRxCnlWgT"
BLYNK_PIN = "V3"
EMAIL_ADDRESS = "electricitycommissionofindia@gmail.com"
EMAIL_PASSWORD = "tszyszoklxwssjma"  # No spaces in the app password

# --- TARIFF SLABS (as per July 2024) ---
TARIFF = [
    (100, 0.00),
    (200, 2.35),
    (400, 4.70),
    (500, 6.30),st
    (600, 8.40),
    (800, 9.45),
    (1000, 10.50)
]

# --- Flask context for user session ---
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import current_user

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///site.db')
db = SQLAlchemy(app)

# --- User model ---
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    # ... other fields as needed

def get_blynk_units():
    url = f"https://blynk.cloud/external/api/get?token={BLYNK_TOKEN}&{BLYNK_PIN}"
    try:
        resp = requests.get(url)
        if resp.status_code == 200:
            data = resp.json() if resp.headers.get('Content-Type','').startswith('application/json') else resp.text
            try:
                if isinstance(data, dict):
                    return float(data.get(BLYNK_PIN, 0))
                return float(data)
            except Exception:
                return 0.0
        else:
            return 0.0
    except Exception:
        return 0.0

def calculate_bill(units):
    remaining = units
    cost = 0.0
    last_limit = 0
    for limit, rate in TARIFF:
        if remaining <= 0:
            break
        slab_units = min(remaining, limit - last_limit)
        cost += slab_units * rate
        remaining -= slab_units
        last_limit = limit
    return round(cost, 2)

def send_bill_email(units, cost, recipient_email):
    subject = "Your Electricity Bill"
    body = f"""
    <h2>Electricity Bill Summary</h2>
    <p><b>Total Units Consumed:</b> {units:.2f} units</p>
    <p><b>Total Amount:</b> â‚¹{cost:.2f}</p>
    <hr>
    <p>This is an automated bill generated by your smart meter system.</p>
    """
    msg = MIMEMultipart()
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = recipient_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'html'))
    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            smtp.send_message(msg)
        print(f"Bill email sent to {recipient_email}!")
    except Exception as e:
        print(f"Failed to send email: {e}")

def get_current_user_email():
    # You may want to replace this with a query to get the most recently logged-in user
    user = User.query.order_by(User.id.desc()).first()
    return user.email if user else None

def send_bill_now():
    units = 200  # For today, assume 200 units as per your request
    cost = calculate_bill(units)
    recipient_email = "niranjan13012007@gmail.com"
    send_bill_email(units, cost, recipient_email)

def schedule_daily_email(hour=6, minute=0):
    while True:
        now = datetime.now()
        next_run = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if next_run <= now:
            next_run += timedelta(days=1)
        wait_seconds = (next_run - now).total_seconds()
        print(f"Waiting {wait_seconds/60:.1f} minutes until next bill email...")
        time.sleep(wait_seconds)
        send_bill_now()

if __name__ == "__main__":
    # --- Test: send one bill now ---
    send_bill_now()
    # --- Schedule daily at 6:00 AM ---
    # schedule_daily_email(hour=6, minute=0)
    # Uncomment above line to enable daily scheduling
